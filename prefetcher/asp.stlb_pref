#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PREFETCH_DEGREE 5             // Prefetch degree - you need to vary this!

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t ip;
    uint64_t addr;
    uint64_t stride;
    uint64_t state;
    int last_time;
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

#define MIN_STATE_REQ 2

int present_time = 0;

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB arbitrary stride prefetcher" << endl;

}

void improve_state(IP_TRACKER*t){
    t->state++;

    if(t->state >= MIN_STATE_REQ){
        t->state = MIN_STATE_REQ;
    }
}

void decrease_state(IP_TRACKER*t){
    t->state--;

    if(t->state <= 0){
        t->state = 0;
    }
}

void intialisze_tracker()


// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // ------------------------ Add Arbitrary Stride pf_address logic here ----------------------- // 

    // prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);

    
    IP_TRACKER*present_tracker;

    int i = 0;

    for( i =0 ; i < IP_TRACKER_COUNT ; i++ ){
        if ( trackers[i].ip == ip ){
            present_tracker = trackers+i;
        }
    }

    if( i == IP_TRACKER_COUNT){
        present_tracker = find_entry(trackers);
        intialisze_tracker(present_tracker);
    }

    if ( index != IP_TRACKER_COUNT ){

        if( present_tracker->stride == ( addr - present_tracker->addr ) ){
            improve_state(present_tracker);
        }
        else{
            decrease_state(present_tracker);
        }

        if( present_tracker->state >= 2){

            uint64_t pf_address = (addr + present_tracker->stride ) << LOG2_BLOCK_SIZE;

            // only issue a prefetch if the prefetch address is in the same 4 KB page
            // as the current demand access address

            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                return;
            
            prefetch_line(ip,addr ,pf_address , FILL_L1 , 0);
        
        }


    }
    
    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB arbitrary stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //