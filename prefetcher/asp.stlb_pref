#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PREFETCH_DEGREE 5             // Prefetch degree - you need to vary this!
#define MIN_STATE_REQ 2               // state at which it starts prefetching 

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t ip;
    uint64_t page_addr;
    uint64_t stride;
    uint64_t state;
    int last_time;
};

IP_TRACKER trackers[IP_TRACKER_COUNT];
int present_time = 0;

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB arbitrary stride prefetcher" << endl;

}

void improve_state(IP_TRACKER*t){
    
    t->state++;

    if(t->state >= MIN_STATE_REQ){
        t->state = MIN_STATE_REQ;
    }
}

void decrease_state(IP_TRACKER*t){
    t->state--;

    if(t->state <= 0){
        t->state = 0;
    }
}

void intialisze_tracker(IP_TRACKER*t,uint64_t ip){

    t->ip = ip;
    t->page_addr = 0;
    t->stride = 0;
    t->state = 0;
    t->time = present_time;

}

IP_TRACKER*find_entry(){

    int min_index = 0;
    int min_time = trackers[0].last_time;

    for (int i = 0 ;i < IP_TRACKER_COUNT ; i++){
        if (trackers[i].last_time < min_time ){
            min_index = i;
            min_time = trackers[i].last_time;
        }
    }

    return trackers+min_index;

}


// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // ------------------------ Add Arbitrary Stride pf_address logic here ----------------------- // 

    

    present_time++;

    if ( cache_hit){
        return;
    }
    
    IP_TRACKER*present_tracker;

    int i = 0;

    for( i =0 ; i < IP_TRACKER_COUNT ; i++ ){
        if ( trackers[i].ip == ip ){
            present_tracker = trackers+i;
        }
    }

    if( i == IP_TRACKER_COUNT){
        present_tracker = find_entry();
        intialisze_tracker(present_tracker,ip);
    }

    uint64_t page_addr = (addr)>>LOG2_PAGE_SIZE ; // page address

    if ( index != IP_TRACKER_COUNT ){

        if( present_tracker->stride == ( page_addr - present_tracker->page_addr ) ){  // stride is cache Line distance between 2 adddress
            improve_state(present_tracker);
        }
        else{
            decrease_state(present_tracker);
        }

        if( present_tracker->state >= 2){
            
            uint64_t pf_address = (page_addr + present_tracker->stride ) << LOG2_PAGE_SIZE;
            prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, 0);

        }

        // Update the the find_entry

        present_tracker->stride = page_addr - present_tracker->page_addr;
        present_tracker->page_addr = page_addr;
        present_tracker->last_time = present_time;

    }
    
    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB arbitrary stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //