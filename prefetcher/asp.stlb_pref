#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PREFETCH_DEGREE 5             // Prefetch degree - you need to vary this!
#define MIN_STATE_REQ 2               // state at which it starts prefetching 

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t ip;
    uint64_t page_addr;
    uint64_t stride;
    uint64_t state;
    uint64_t last_time;

    IP_TRACKER () {
        ip = 0;
        page_addr = 0;
        stride = 0;
        state= 0;
        last_time = 0;
    };

    void reinitialize(uint64_t ip_tag , uint64_t t){
        ip = ip_tag;
        page_addr = 0;
        stride = 0;
        state = 0;
        last_time = t;
        
    }


};

IP_TRACKER trackers_table[IP_TRACKER_COUNT];
int present_time = 0;

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB arbitrary stride prefetcher" << endl;

}


void update_state(IP_TRACKER*entry,uint64_t stride) {

    uint16_t conf = entry->state;

    if(entry->stride == stride){
        conf++;
        if(conf > MIN_STATE_REQ + 1)
            conf = MIN_STATE_REQ + 1;
    }
    else{
        conf--;
        if(conf < 0){
            conf = 0;
        }
    }

    entry->state = conf;

    if(entry->state == 0)
        entry->stride = stride;

}

IP_TRACKER* find_tracker(uint64_t ip){

    uint64_t min_time = trackers_table[0].last_time;
    IP_TRACKER*tracker = trackers_table ;

    for( int i = 0 ; i < IP_TRACKER_COUNT ; i++ ){

        if( ip == trackers_table[i].ip){
            trackers_table[i].last_time = present_time;
            return trackers_table + i;
        }

        if( min_time > trackers_table[i].last_time){
            tracker = trackers_table + i;
            min_time = trackers_table[i].last_time;
        }

    }

    tracker->reinitialize(ip,present_time);
    return tracker;
}



// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    
    present_time++;

    if(cache_hit){
        return;
    }

    IP_TRACKER*tracker = find_tracker(ip);

    uint64_t page_addr = addr >> LOG2_PAGE_SIZE;
    uint64_t stride = page_addr - tracker->page_addr;

    update_state(tracker,stride);

    if ( tracker->state >= MIN_STATE_REQ ){

        for (int j = 1 ; j <= PREFETCH_DEGREE ; j++) {

            uint64_t pf_address = (page_addr + stride*j ) << LOG2_PAGE_SIZE;

            prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);

        }

        // Update the the find_entry
    }

    //update trakcer page_addr
    tracker->page_addr = page_addr;
    
    return;

    

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB arbitrary stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //